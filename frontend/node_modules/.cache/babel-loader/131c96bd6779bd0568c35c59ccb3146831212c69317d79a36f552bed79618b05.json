{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// Load state from localStorage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.error('Failed to load state from localStorage:', err);\n    return undefined;\n  }\n};\n\n// Save state to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.error('Failed to save state to localStorage:', err);\n  }\n};\nconst initialState = loadState() || {\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }\n  // ... other users\n  ],\n\n  transactions: [],\n  // Ensure transactions is an array\n  adminTransactions: [],\n  // Ensure adminTransactions is an array\n  stocks: {}\n};\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.balance >= amount) {\n        user.balance -= amount;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\n        console.log('Before pushing to transactions:', state.transactions);\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n        console.log('After pushing to transactions:', state.transactions);\n\n        // Automatically buy stocks for the admin\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount;\n        console.log('Before pushing to adminTransactions:', state.adminTransactions);\n        state.adminTransactions.push({\n          type: 'Admin Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n        console.log('After pushing to adminTransactions:', state.adminTransactions);\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\n        console.log('Before pushing to transactions:', state.transactions);\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n        console.log('After pushing to transactions:', state.transactions);\n\n        // Automatically sell stocks for the admin\n        if (state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          user.balance += amount;\n          console.log('Before pushing to adminTransactions:', state.adminTransactions);\n          state.adminTransactions.push({\n            userId: 'admin',\n            // Assuming admin has a unique ID or placeholder\n            type: 'Admin Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n          console.log('After pushing to adminTransactions:', state.adminTransactions);\n        }\n      }\n    }\n  }\n});\nexport const {\n  buyToken,\n  buyStockWithToken\n} = userSlice.actions;\nconst store = configureStore({\n  reducer: userSlice.reducer,\n  preloadedState: loadState()\n});\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport { store };","map":{"version":3,"names":["configureStore","createSlice","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","console","error","saveState","state","stringify","setItem","initialState","users","id","name","balance","tokens","stocks","transactions","adminTransactions","userSlice","reducers","buyToken","action","userId","stock","amount","payload","user","find","log","push","type","timestamp","Date","toISOString","buyStockWithToken","actions","store","reducer","preloadedState","subscribe","getState"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/redux/Store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// Load state from localStorage\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    console.error('Failed to load state from localStorage:', err)\r\n    return undefined\r\n  }\r\n}\r\n\r\n// Save state to localStorage\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    console.error('Failed to save state to localStorage:', err)\r\n  }\r\n}\r\n\r\nconst initialState = loadState() || {\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n    // ... other users\r\n  ],\r\n  transactions: [], // Ensure transactions is an array\r\n  adminTransactions: [], // Ensure adminTransactions is an array\r\n  stocks: {},\r\n}\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.balance >= amount) {\r\n        user.balance -= amount\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount\r\n\r\n        console.log('Before pushing to transactions:', state.transactions)\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n        console.log('After pushing to transactions:', state.transactions)\r\n\r\n        // Automatically buy stocks for the admin\r\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount\r\n\r\n        console.log('Before pushing to adminTransactions:', state.adminTransactions)\r\n        state.adminTransactions.push({\r\n          type: 'Admin Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n        console.log('After pushing to adminTransactions:', state.adminTransactions)\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount\r\n\r\n        console.log('Before pushing to transactions:', state.transactions)\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n        console.log('After pushing to transactions:', state.transactions)\r\n\r\n        // Automatically sell stocks for the admin\r\n        if (state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount\r\n          user.balance += amount\r\n\r\n          console.log('Before pushing to adminTransactions:', state.adminTransactions)\r\n          state.adminTransactions.push({\r\n            userId: 'admin', // Assuming admin has a unique ID or placeholder\r\n            type: 'Admin Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n          console.log('After pushing to adminTransactions:', state.adminTransactions)\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStockWithToken } = userSlice.actions\r\n\r\nconst store = configureStore({\r\n  reducer: userSlice.reducer,\r\n  preloadedState: loadState(),\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport { store }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}