{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// Load state from localStorage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.error('Failed to load state from localStorage:', err);\n    return undefined;\n  }\n};\n\n// Save state to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.error('Failed to save state to localStorage:', err);\n  }\n};\n\n// Default state\nconst getDefaultState = () => ({\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 2,\n    name: 'User2',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 3,\n    name: 'User3',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 4,\n    name: 'User4',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 5,\n    name: 'User5',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }],\n  transactions: [],\n  // Ensure transactions is an array\n  adminTransactions: [],\n  // Ensure adminTransactions is an array\n  stocks: {},\n  AdminFunds: 1000000,\n  // Initialize AdminFunds with $1,000,000\n  stockPrices: {\n    // Add stock prices\n    Apple: 150,\n    Google: 2800,\n    Amazon: 3400,\n    Bitcoin: 299,\n    Tesla: 700,\n    Hero: 360,\n    Eitherium: 590,\n    Dogcoin: 220,\n    Reliance: 175,\n    NASDAQ: 230\n  }\n});\n\n// Ensure the loaded state has all required properties\nconst ensureStateStructure = state => {\n  if (!state) return getDefaultState();\n  return {\n    users: state.users || [{\n      id: 1,\n      name: 'User1',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 2,\n      name: 'User2',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 3,\n      name: 'User3',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 4,\n      name: 'User4',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 5,\n      name: 'User5',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }],\n    transactions: state.transactions || [],\n    adminTransactions: state.adminTransactions || [],\n    stocks: state.stocks || {},\n    AdminFunds: state.AdminFunds !== undefined ? state.AdminFunds : 1000000,\n    // Ensure AdminFunds is loaded or set to default\n    stockPrices: state.stockPrices || {\n      // Ensure stockPrices is loaded or set to default\n      Apple: 150,\n      Google: 2800,\n      Amazon: 3400,\n      Bitcoin: 299,\n      Tesla: 700,\n      Hero: 360,\n      Eitherium: 590,\n      Dogcoin: 220,\n      Reliance: 175,\n      NASDAQ: 230\n    }\n  };\n};\nconst initialState = ensureStateStructure(loadState());\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      const stockPrice = state.stockPrices[stock] || 0;\n      const totalCost = amount * stockPrice;\n      if (user && user.balance >= totalCost) {\n        user.balance -= totalCost;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically buy stocks for the admin if the stock is 'Hero'\n        if (stock === 'Hero') {\n          state.stocks[stock] = (state.stocks[stock] || 0) + amount;\n          state.adminTransactions.push({\n            type: 'Admin Buy Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n\n          // Deduct the equivalent money of stock from AdminFunds\n          state.AdminFunds -= totalCost;\n        }\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      const stockPrice = state.stockPrices[stock] || 0;\n      const totalValue = amount * stockPrice;\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically sell stocks for the admin if the stock is 'Hero'\n        if (stock === 'Hero' && state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          state.adminTransactions.push({\n            userId: 'admin',\n            // Assuming admin has a unique ID or placeholder\n            type: 'Admin Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n\n          // Add the equivalent money of stock to AdminFunds\n          state.AdminFunds += totalValue;\n        }\n      }\n    },\n    adminSellStock: (state, action) => {\n      const {\n        stock,\n        amount\n      } = action.payload;\n      const stockPrice = state.stockPrices[stock] || 0;\n      const totalValue = amount * stockPrice;\n      if (state.stocks[stock] >= amount) {\n        state.stocks[stock] -= amount;\n        state.adminTransactions.push({\n          userId: 'admin',\n          // Assuming admin has a unique ID or placeholder\n          type: 'Time Out:Auto Sell',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Add the equivalent money of stock to AdminFunds\n        state.AdminFunds += totalValue;\n      }\n    }\n  }\n});\nexport const {\n  buyToken,\n  buyStockWithToken,\n  adminSellStock\n} = userSlice.actions;\n\n// Middleware to handle delayed actions\nconst timedActionMiddleware = store => next => action => {\n  if (action.type === 'users/buyToken') {\n    const {\n      userId,\n      stock,\n      amount\n    } = action.payload;\n\n    // Set a timeout for 5 minutes (300000 ms)\n    setTimeout(() => {\n      const state = store.getState();\n      const user = state.users.find(user => user.id === userId);\n\n      // Check if the user hasn't bought the stock with the token\n      if (user && user.tokens[stock] >= amount) {\n        store.dispatch(adminSellStock({\n          stock,\n          amount\n        }));\n      }\n    }, 2000);\n  }\n  return next(action);\n};\nconst store = configureStore({\n  reducer: userSlice.reducer,\n  preloadedState: initialState,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(timedActionMiddleware)\n});\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport { store };","map":{"version":3,"names":["configureStore","createSlice","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","console","error","saveState","state","stringify","setItem","getDefaultState","users","id","name","balance","tokens","stocks","transactions","adminTransactions","AdminFunds","stockPrices","Apple","Google","Amazon","Bitcoin","Tesla","Hero","Eitherium","Dogcoin","Reliance","NASDAQ","ensureStateStructure","initialState","userSlice","reducers","buyToken","action","userId","stock","amount","payload","user","find","stockPrice","totalCost","push","type","timestamp","Date","toISOString","buyStockWithToken","totalValue","adminSellStock","actions","timedActionMiddleware","store","next","setTimeout","getState","dispatch","reducer","preloadedState","middleware","getDefaultMiddleware","concat","subscribe"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/redux/Store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// Load state from localStorage\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    console.error('Failed to load state from localStorage:', err)\r\n    return undefined\r\n  }\r\n}\r\n\r\n// Save state to localStorage\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    console.error('Failed to save state to localStorage:', err)\r\n  }\r\n}\r\n\r\n// Default state\r\nconst getDefaultState = () => ({\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 5, name: 'User5', balance: 100000, tokens: {}, stocks: {} },\r\n  ],\r\n  transactions: [], // Ensure transactions is an array\r\n  adminTransactions: [], // Ensure adminTransactions is an array\r\n  stocks: {},\r\n  AdminFunds: 1000000, // Initialize AdminFunds with $1,000,000\r\n  stockPrices: {\r\n    // Add stock prices\r\n    Apple: 150,\r\n    Google: 2800,\r\n    Amazon: 3400,\r\n    Bitcoin: 299,\r\n    Tesla: 700,\r\n    Hero: 360,\r\n    Eitherium: 590,\r\n    Dogcoin: 220,\r\n    Reliance: 175,\r\n    NASDAQ: 230,\r\n  },\r\n})\r\n\r\n// Ensure the loaded state has all required properties\r\nconst ensureStateStructure = (state) => {\r\n  if (!state) return getDefaultState()\r\n  return {\r\n    users: state.users || [\r\n      { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 5, name: 'User5', balance: 100000, tokens: {}, stocks: {} },\r\n    ],\r\n    transactions: state.transactions || [],\r\n    adminTransactions: state.adminTransactions || [],\r\n    stocks: state.stocks || {},\r\n    AdminFunds: state.AdminFunds !== undefined ? state.AdminFunds : 1000000, // Ensure AdminFunds is loaded or set to default\r\n    stockPrices: state.stockPrices || {\r\n      // Ensure stockPrices is loaded or set to default\r\n      Apple: 150,\r\n      Google: 2800,\r\n      Amazon: 3400,\r\n      Bitcoin: 299,\r\n      Tesla: 700,\r\n      Hero: 360,\r\n      Eitherium: 590,\r\n      Dogcoin: 220,\r\n      Reliance: 175,\r\n      NASDAQ: 230,\r\n    },\r\n  }\r\n}\r\n\r\nconst initialState = ensureStateStructure(loadState())\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      const stockPrice = state.stockPrices[stock] || 0\r\n      const totalCost = amount * stockPrice\r\n\r\n      if (user && user.balance >= totalCost) {\r\n        user.balance -= totalCost\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount\r\n\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically buy stocks for the admin if the stock is 'Hero'\r\n        if (stock === 'Hero') {\r\n          state.stocks[stock] = (state.stocks[stock] || 0) + amount\r\n          state.adminTransactions.push({\r\n            type: 'Admin Buy Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n\r\n          // Deduct the equivalent money of stock from AdminFunds\r\n          state.AdminFunds -= totalCost\r\n        }\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      const stockPrice = state.stockPrices[stock] || 0\r\n      const totalValue = amount * stockPrice\r\n\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount\r\n\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically sell stocks for the admin if the stock is 'Hero'\r\n        if (stock === 'Hero' && state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount\r\n          state.adminTransactions.push({\r\n            userId: 'admin', // Assuming admin has a unique ID or placeholder\r\n            type: 'Admin Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n\r\n          // Add the equivalent money of stock to AdminFunds\r\n          state.AdminFunds += totalValue\r\n        }\r\n      }\r\n    },\r\n    adminSellStock: (state, action) => {\r\n      const { stock, amount } = action.payload\r\n      const stockPrice = state.stockPrices[stock] || 0\r\n      const totalValue = amount * stockPrice\r\n\r\n      if (state.stocks[stock] >= amount) {\r\n        state.stocks[stock] -= amount\r\n        state.adminTransactions.push({\r\n          userId: 'admin', // Assuming admin has a unique ID or placeholder\r\n          type: 'Time Out:Auto Sell',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Add the equivalent money of stock to AdminFunds\r\n        state.AdminFunds += totalValue\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStockWithToken, adminSellStock } = userSlice.actions\r\n\r\n// Middleware to handle delayed actions\r\nconst timedActionMiddleware = (store) => (next) => (action) => {\r\n  if (action.type === 'users/buyToken') {\r\n    const { userId, stock, amount } = action.payload\r\n\r\n    // Set a timeout for 5 minutes (300000 ms)\r\n    setTimeout(() => {\r\n      const state = store.getState()\r\n      const user = state.users.find((user) => user.id === userId)\r\n\r\n      // Check if the user hasn't bought the stock with the token\r\n      if (user && user.tokens[stock] >= amount) {\r\n        store.dispatch(adminSellStock({ stock, amount }))\r\n      }\r\n    }, 2000)\r\n  }\r\n\r\n  return next(action)\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: userSlice.reducer,\r\n  preloadedState: initialState,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(timedActionMiddleware),\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport { store }\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;;AAE9D;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACrD,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC5B,OAAOG,SAAS;IAClB;IACA,OAAOC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEF,GAAG,CAAC;IAC7D,OAAOH,SAAS;EAClB;AACF,CAAC;;AAED;AACA,MAAMM,SAAS,GAAIC,KAAK,IAAK;EAC3B,IAAI;IACF,MAAMV,eAAe,GAAGI,IAAI,CAACO,SAAS,CAACD,KAAK,CAAC;IAC7CT,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEZ,eAAe,CAAC;EAChD,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAAC;EAC7D;AACF,CAAC;;AAED;AACA,MAAMO,eAAe,GAAGA,CAAA,MAAO;EAC7BC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,OAAO,EAAE,MAAM;IAAEC,MAAM,EAAE,CAAC,CAAC;IAAEC,MAAM,EAAE,CAAC;EAAE,CAAC,EACjE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,OAAO,EAAE,MAAM;IAAEC,MAAM,EAAE,CAAC,CAAC;IAAEC,MAAM,EAAE,CAAC;EAAE,CAAC,EACjE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,OAAO,EAAE,MAAM;IAAEC,MAAM,EAAE,CAAC,CAAC;IAAEC,MAAM,EAAE,CAAC;EAAE,CAAC,EACjE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,OAAO,EAAE,MAAM;IAAEC,MAAM,EAAE,CAAC,CAAC;IAAEC,MAAM,EAAE,CAAC;EAAE,CAAC,EACjE;IAAEJ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,OAAO,EAAE,MAAM;IAAEC,MAAM,EAAE,CAAC,CAAC;IAAEC,MAAM,EAAE,CAAC;EAAE,CAAC,CAClE;EACDC,YAAY,EAAE,EAAE;EAAE;EAClBC,iBAAiB,EAAE,EAAE;EAAE;EACvBF,MAAM,EAAE,CAAC,CAAC;EACVG,UAAU,EAAE,OAAO;EAAE;EACrBC,WAAW,EAAE;IACX;IACAC,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,GAAG;IACZC,KAAK,EAAE,GAAG;IACVC,IAAI,EAAE,GAAG;IACTC,SAAS,EAAE,GAAG;IACdC,OAAO,EAAE,GAAG;IACZC,QAAQ,EAAE,GAAG;IACbC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,oBAAoB,GAAIxB,KAAK,IAAK;EACtC,IAAI,CAACA,KAAK,EAAE,OAAOG,eAAe,CAAC,CAAC;EACpC,OAAO;IACLC,KAAK,EAAEJ,KAAK,CAACI,KAAK,IAAI,CACpB;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,CAAC;MAAEC,MAAM,EAAE,CAAC;IAAE,CAAC,EACjE;MAAEJ,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,CAAC;MAAEC,MAAM,EAAE,CAAC;IAAE,CAAC,EACjE;MAAEJ,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,CAAC;MAAEC,MAAM,EAAE,CAAC;IAAE,CAAC,EACjE;MAAEJ,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,CAAC;MAAEC,MAAM,EAAE,CAAC;IAAE,CAAC,EACjE;MAAEJ,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,CAAC;MAAEC,MAAM,EAAE,CAAC;IAAE,CAAC,CAClE;IACDC,YAAY,EAAEV,KAAK,CAACU,YAAY,IAAI,EAAE;IACtCC,iBAAiB,EAAEX,KAAK,CAACW,iBAAiB,IAAI,EAAE;IAChDF,MAAM,EAAET,KAAK,CAACS,MAAM,IAAI,CAAC,CAAC;IAC1BG,UAAU,EAAEZ,KAAK,CAACY,UAAU,KAAKnB,SAAS,GAAGO,KAAK,CAACY,UAAU,GAAG,OAAO;IAAE;IACzEC,WAAW,EAAEb,KAAK,CAACa,WAAW,IAAI;MAChC;MACAC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,IAAI;MACZC,OAAO,EAAE,GAAG;MACZC,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,GAAG;MACTC,SAAS,EAAE,GAAG;MACdC,OAAO,EAAE,GAAG;MACZC,QAAQ,EAAE,GAAG;MACbC,MAAM,EAAE;IACV;EACF,CAAC;AACH,CAAC;AAED,MAAME,YAAY,GAAGD,oBAAoB,CAACnC,SAAS,CAAC,CAAC,CAAC;;AAEtD;AACA,MAAMqC,SAAS,GAAGtC,WAAW,CAAC;EAC5BkB,IAAI,EAAE,OAAO;EACbmB,YAAY;EACZE,QAAQ,EAAE;IACRC,QAAQ,EAAEA,CAAC5B,KAAK,EAAE6B,MAAM,KAAK;MAC3B,MAAM;QAAEC,MAAM;QAAEC,KAAK;QAAEC;MAAO,CAAC,GAAGH,MAAM,CAACI,OAAO;MAChD,MAAMC,IAAI,GAAGlC,KAAK,CAACI,KAAK,CAAC+B,IAAI,CAAED,IAAI,IAAKA,IAAI,CAAC7B,EAAE,KAAKyB,MAAM,CAAC;MAC3D,MAAMM,UAAU,GAAGpC,KAAK,CAACa,WAAW,CAACkB,KAAK,CAAC,IAAI,CAAC;MAChD,MAAMM,SAAS,GAAGL,MAAM,GAAGI,UAAU;MAErC,IAAIF,IAAI,IAAIA,IAAI,CAAC3B,OAAO,IAAI8B,SAAS,EAAE;QACrCH,IAAI,CAAC3B,OAAO,IAAI8B,SAAS;QACzBH,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CAAC,GAAG,CAACG,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CAAC,IAAI,CAAC,IAAIC,MAAM;QAEvDhC,KAAK,CAACU,YAAY,CAAC4B,IAAI,CAAC;UACtBR,MAAM;UACNS,IAAI,EAAE,WAAW;UACjBR,KAAK;UACLC,MAAM;UACNQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;;QAEF;QACA,IAAIX,KAAK,KAAK,MAAM,EAAE;UACpB/B,KAAK,CAACS,MAAM,CAACsB,KAAK,CAAC,GAAG,CAAC/B,KAAK,CAACS,MAAM,CAACsB,KAAK,CAAC,IAAI,CAAC,IAAIC,MAAM;UACzDhC,KAAK,CAACW,iBAAiB,CAAC2B,IAAI,CAAC;YAC3BC,IAAI,EAAE,iBAAiB;YACvBR,KAAK;YACLC,MAAM;YACNQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC,CAAC;;UAEF;UACA1C,KAAK,CAACY,UAAU,IAAIyB,SAAS;QAC/B;MACF;IACF,CAAC;IACDM,iBAAiB,EAAEA,CAAC3C,KAAK,EAAE6B,MAAM,KAAK;MACpC,MAAM;QAAEC,MAAM;QAAEC,KAAK;QAAEC;MAAO,CAAC,GAAGH,MAAM,CAACI,OAAO;MAChD,MAAMC,IAAI,GAAGlC,KAAK,CAACI,KAAK,CAAC+B,IAAI,CAAED,IAAI,IAAKA,IAAI,CAAC7B,EAAE,KAAKyB,MAAM,CAAC;MAC3D,MAAMM,UAAU,GAAGpC,KAAK,CAACa,WAAW,CAACkB,KAAK,CAAC,IAAI,CAAC;MAChD,MAAMa,UAAU,GAAGZ,MAAM,GAAGI,UAAU;MAEtC,IAAIF,IAAI,IAAIA,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CAAC,IAAIC,MAAM,EAAE;QACxCE,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CAAC,IAAIC,MAAM;QAC5BE,IAAI,CAACzB,MAAM,CAACsB,KAAK,CAAC,GAAG,CAACG,IAAI,CAACzB,MAAM,CAACsB,KAAK,CAAC,IAAI,CAAC,IAAIC,MAAM;QAEvDhC,KAAK,CAACU,YAAY,CAAC4B,IAAI,CAAC;UACtBR,MAAM;UACNS,IAAI,EAAE,WAAW;UACjBR,KAAK;UACLC,MAAM;UACNQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;;QAEF;QACA,IAAIX,KAAK,KAAK,MAAM,IAAI/B,KAAK,CAACS,MAAM,CAACsB,KAAK,CAAC,IAAIC,MAAM,EAAE;UACrDhC,KAAK,CAACS,MAAM,CAACsB,KAAK,CAAC,IAAIC,MAAM;UAC7BhC,KAAK,CAACW,iBAAiB,CAAC2B,IAAI,CAAC;YAC3BR,MAAM,EAAE,OAAO;YAAE;YACjBS,IAAI,EAAE,kBAAkB;YACxBR,KAAK;YACLC,MAAM;YACNQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC,CAAC;;UAEF;UACA1C,KAAK,CAACY,UAAU,IAAIgC,UAAU;QAChC;MACF;IACF,CAAC;IACDC,cAAc,EAAEA,CAAC7C,KAAK,EAAE6B,MAAM,KAAK;MACjC,MAAM;QAAEE,KAAK;QAAEC;MAAO,CAAC,GAAGH,MAAM,CAACI,OAAO;MACxC,MAAMG,UAAU,GAAGpC,KAAK,CAACa,WAAW,CAACkB,KAAK,CAAC,IAAI,CAAC;MAChD,MAAMa,UAAU,GAAGZ,MAAM,GAAGI,UAAU;MAEtC,IAAIpC,KAAK,CAACS,MAAM,CAACsB,KAAK,CAAC,IAAIC,MAAM,EAAE;QACjChC,KAAK,CAACS,MAAM,CAACsB,KAAK,CAAC,IAAIC,MAAM;QAC7BhC,KAAK,CAACW,iBAAiB,CAAC2B,IAAI,CAAC;UAC3BR,MAAM,EAAE,OAAO;UAAE;UACjBS,IAAI,EAAE,oBAAoB;UAC1BR,KAAK;UACLC,MAAM;UACNQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;;QAEF;QACA1C,KAAK,CAACY,UAAU,IAAIgC,UAAU;MAChC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEhB,QAAQ;EAAEe,iBAAiB;EAAEE;AAAe,CAAC,GAAGnB,SAAS,CAACoB,OAAO;;AAEhF;AACA,MAAMC,qBAAqB,GAAIC,KAAK,IAAMC,IAAI,IAAMpB,MAAM,IAAK;EAC7D,IAAIA,MAAM,CAACU,IAAI,KAAK,gBAAgB,EAAE;IACpC,MAAM;MAAET,MAAM;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGH,MAAM,CAACI,OAAO;;IAEhD;IACAiB,UAAU,CAAC,MAAM;MACf,MAAMlD,KAAK,GAAGgD,KAAK,CAACG,QAAQ,CAAC,CAAC;MAC9B,MAAMjB,IAAI,GAAGlC,KAAK,CAACI,KAAK,CAAC+B,IAAI,CAAED,IAAI,IAAKA,IAAI,CAAC7B,EAAE,KAAKyB,MAAM,CAAC;;MAE3D;MACA,IAAII,IAAI,IAAIA,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CAAC,IAAIC,MAAM,EAAE;QACxCgB,KAAK,CAACI,QAAQ,CAACP,cAAc,CAAC;UAAEd,KAAK;UAAEC;QAAO,CAAC,CAAC,CAAC;MACnD;IACF,CAAC,EAAE,IAAI,CAAC;EACV;EAEA,OAAOiB,IAAI,CAACpB,MAAM,CAAC;AACrB,CAAC;AAED,MAAMmB,KAAK,GAAG7D,cAAc,CAAC;EAC3BkE,OAAO,EAAE3B,SAAS,CAAC2B,OAAO;EAC1BC,cAAc,EAAE7B,YAAY;EAC5B8B,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACV,qBAAqB;AACvD,CAAC,CAAC;AAEFC,KAAK,CAACU,SAAS,CAAC,MAAM;EACpB3D,SAAS,CAACiD,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,SAASH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}