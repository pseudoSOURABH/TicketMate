{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// Initial state\nconst initialState = {\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {}\n  }, {\n    id: 2,\n    name: 'User2',\n    balance: 100000,\n    tokens: {}\n  }, {\n    id: 3,\n    name: 'User3',\n    balance: 100000,\n    tokens: {}\n  }, {\n    id: 4,\n    name: 'User4',\n    balance: 100000,\n    tokens: {}\n  }],\n  transactions: [],\n  stocks: {}\n};\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.balance >= amount) {\n        user.balance -= amount;\n        if (!user.tokens[stock]) {\n          user.tokens[stock] = 0;\n        }\n        user.tokens[stock] += amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n      }\n    },\n    buyStock: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        if (!state.stocks[stock]) {\n          state.stocks[stock] = 0;\n        }\n        state.stocks[stock] += amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n      }\n    },\n    sellStock: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (state.stocks[stock] >= amount) {\n        state.stocks[stock] -= amount;\n        user.balance += amount;\n        state.transactions.push({\n          userId,\n          type: 'Sell Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n  }\n});\nexport const {\n  buyToken,\n  buyStock,\n  sellStock\n} = userSlice.actions;\nexport const store = configureStore({\n  reducer: userSlice.reducer\n});","map":{"version":3,"names":["configureStore","createSlice","initialState","users","id","name","balance","tokens","transactions","stocks","userSlice","reducers","buyToken","state","action","userId","stock","amount","payload","user","find","push","type","timestamp","Date","toISOString","buyStock","sellStock","actions","store","reducer"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// Initial state\r\nconst initialState = {\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {} },\r\n    { id: 2, name: 'User2', balance: 100000, tokens: {} },\r\n    { id: 3, name: 'User3', balance: 100000, tokens: {} },\r\n    { id: 4, name: 'User4', balance: 100000, tokens: {} },\r\n  ],\r\n  transactions: [],\r\n  stocks: {},\r\n}\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.balance >= amount) {\r\n        user.balance -= amount\r\n        if (!user.tokens[stock]) {\r\n          user.tokens[stock] = 0\r\n        }\r\n        user.tokens[stock] += amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n      }\r\n    },\r\n    buyStock: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount\r\n        if (!state.stocks[stock]) {\r\n          state.stocks[stock] = 0\r\n        }\r\n        state.stocks[stock] += amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n      }\r\n    },\r\n    sellStock: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (state.stocks[stock] >= amount) {\r\n        state.stocks[stock] -= amount\r\n        user.balance += amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Sell Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStock, sellStock } = userSlice.actions\r\nexport const store = configureStore({ reducer: userSlice.reducer })\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}