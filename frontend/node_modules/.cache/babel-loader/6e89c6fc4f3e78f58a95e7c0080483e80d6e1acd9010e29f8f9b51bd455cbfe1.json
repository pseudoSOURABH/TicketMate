{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// Load state from localStorage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.error('Failed to load state from localStorage:', err);\n    return undefined;\n  }\n};\n\n// Save state to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    console.error('Failed to save state to localStorage:', err);\n  }\n};\n\n// Default state\nconst getDefaultState = () => ({\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 2,\n    name: 'User2',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 3,\n    name: 'User3',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 4,\n    name: 'User4',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 5,\n    name: 'User5',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }],\n  transactions: [],\n  // Ensure transactions is an array\n  adminTransactions: [],\n  // Ensure adminTransactions is an array\n  stocks: {},\n  AdminFunds: 1000000,\n  // Initialize AdminFunds with $1,000,000\n  stockPrices: {\n    // Add stock prices\n    'Apple': 150,\n    'Google': 2800,\n    'Amazon': 3400,\n    'Bitcoin': 299,\n    'Tesla': 700,\n    'Salenium': 360,\n    'Eitherium': 590,\n    'Dogcoin': 220,\n    'DIS': 175,\n    'V': 230\n  }\n});\n\n// Ensure the loaded state has all required properties\nconst ensureStateStructure = state => {\n  if (!state) return getDefaultState();\n  return {\n    users: state.users || [{\n      id: 1,\n      name: 'User1',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 2,\n      name: 'User2',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 3,\n      name: 'User3',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 4,\n      name: 'User4',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }, {\n      id: 5,\n      name: 'User5',\n      balance: 100000,\n      tokens: {},\n      stocks: {}\n    }],\n    transactions: state.transactions || [],\n    adminTransactions: state.adminTransactions || [],\n    stocks: state.stocks || {},\n    AdminFunds: state.AdminFunds !== undefined ? state.AdminFunds : 1000000,\n    // Ensure AdminFunds is loaded or set to default\n    stockPrices: state.stockPrices || {\n      // Ensure stockPrices is loaded or set to default\n      'AAPL': 150,\n      'GOOGL': 2800,\n      'AMZN': 3400,\n      'MSFT': 299,\n      'TSLA': 700,\n      'FB': 360,\n      'NFLX': 590,\n      'NVDA': 220,\n      'DIS': 175,\n      'V': 230\n    }\n  };\n};\nconst initialState = ensureStateStructure(loadState());\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      const stockPrice = state.stockPrices[stock] || 0;\n      const totalCost = amount * stockPrice;\n      if (user && user.balance >= totalCost) {\n        user.balance -= totalCost;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically buy stocks for the admin\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount;\n        state.adminTransactions.push({\n          type: 'Admin Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Deduct the equivalent money of stock from AdminFunds\n        state.AdminFunds -= totalCost;\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      const stockPrice = state.stockPrices[stock] || 0;\n      const totalValue = amount * stockPrice;\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically sell stocks for the admin\n        if (state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          state.adminTransactions.push({\n            userId: 'admin',\n            // Assuming admin has a unique ID or placeholder\n            type: 'Admin Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n\n          // Add the equivalent money of stock to AdminFunds\n          state.AdminFunds += totalValue;\n        }\n      }\n    }\n  }\n});\nexport const {\n  buyToken,\n  buyStockWithToken\n} = userSlice.actions;\nconst store = configureStore({\n  reducer: userSlice.reducer,\n  preloadedState: initialState\n});\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport { store };","map":{"version":3,"names":["configureStore","createSlice","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","console","error","saveState","state","stringify","setItem","getDefaultState","users","id","name","balance","tokens","stocks","transactions","adminTransactions","AdminFunds","stockPrices","ensureStateStructure","initialState","userSlice","reducers","buyToken","action","userId","stock","amount","payload","user","find","stockPrice","totalCost","push","type","timestamp","Date","toISOString","buyStockWithToken","totalValue","actions","store","reducer","preloadedState","subscribe","getState"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/redux/Store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// Load state from localStorage\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    console.error('Failed to load state from localStorage:', err)\r\n    return undefined\r\n  }\r\n}\r\n\r\n// Save state to localStorage\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    console.error('Failed to save state to localStorage:', err)\r\n  }\r\n}\r\n\r\n// Default state\r\nconst getDefaultState = () => ({\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 5, name: 'User5', balance: 100000, tokens: {}, stocks: {} },\r\n  ],\r\n  transactions: [], // Ensure transactions is an array\r\n  adminTransactions: [], // Ensure adminTransactions is an array\r\n  stocks: {},\r\n  AdminFunds: 1000000, // Initialize AdminFunds with $1,000,000\r\n  stockPrices: { // Add stock prices\r\n    'Apple': 150,\r\n    'Google': 2800,\r\n    'Amazon': 3400,\r\n    'Bitcoin': 299,\r\n    'Tesla': 700,\r\n    'Salenium': 360,\r\n    'Eitherium': 590,\r\n    'Dogcoin': 220,\r\n    'DIS': 175,\r\n    'V': 230,\r\n  }\r\n})\r\n\r\n// Ensure the loaded state has all required properties\r\nconst ensureStateStructure = (state) => {\r\n  if (!state) return getDefaultState()\r\n  return {\r\n    users: state.users || [\r\n      { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n      { id: 5, name: 'User5', balance: 100000, tokens: {}, stocks: {} },\r\n    ],\r\n    transactions: state.transactions || [],\r\n    adminTransactions: state.adminTransactions || [],\r\n    stocks: state.stocks || {},\r\n    AdminFunds: state.AdminFunds !== undefined ? state.AdminFunds : 1000000, // Ensure AdminFunds is loaded or set to default\r\n    stockPrices: state.stockPrices || { // Ensure stockPrices is loaded or set to default\r\n      'AAPL': 150,\r\n      'GOOGL': 2800,\r\n      'AMZN': 3400,\r\n      'MSFT': 299,\r\n      'TSLA': 700,\r\n      'FB': 360,\r\n      'NFLX': 590,\r\n      'NVDA': 220,\r\n      'DIS': 175,\r\n      'V': 230,\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState = ensureStateStructure(loadState())\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      const stockPrice = state.stockPrices[stock] || 0\r\n      const totalCost = amount * stockPrice\r\n\r\n      if (user && user.balance >= totalCost) {\r\n        user.balance -= totalCost\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount\r\n\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically buy stocks for the admin\r\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount\r\n        state.adminTransactions.push({\r\n          type: 'Admin Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Deduct the equivalent money of stock from AdminFunds\r\n        state.AdminFunds -= totalCost\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      const stockPrice = state.stockPrices[stock] || 0\r\n      const totalValue = amount * stockPrice\r\n\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount\r\n\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically sell stocks for the admin\r\n        if (state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount\r\n          state.adminTransactions.push({\r\n            userId: 'admin', // Assuming admin has a unique ID or placeholder\r\n            type: 'Admin Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n\r\n          // Add the equivalent money of stock to AdminFunds\r\n          state.AdminFunds += totalValue\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStockWithToken } = userSlice.actions\r\n\r\nconst store = configureStore({\r\n  reducer: userSlice.reducer,\r\n  preloadedState: initialState,\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport { store }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}