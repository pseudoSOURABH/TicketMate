{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// Load state from localStorage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      // Initialize the state in local storage if it doesn't exist\n      initialState = {\n        users: [{\n          id: 1,\n          name: 'User1',\n          balance: 100000,\n          tokens: {},\n          stocks: {}\n        }, {\n          id: 2,\n          name: 'User2',\n          balance: 100000,\n          tokens: {},\n          stocks: {}\n        }, {\n          id: 3,\n          name: 'User3',\n          balance: 100000,\n          tokens: {},\n          stocks: {}\n        }, {\n          id: 4,\n          name: 'User4',\n          balance: 100000,\n          tokens: {},\n          stocks: {}\n        }],\n        transactions: [],\n        adminTransactions: [],\n        stocks: {}\n      };\n      localStorage.setItem('state', JSON.stringify(initialState));\n      return initialState;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// Save state to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    // Ignore write errors\n  }\n};\n\n// const initialState = loadState() || {\n//   users: [\n//     { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\n//     { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\n//     { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\n//     { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\n//   ],\n//   transactions: [],\n//   adminTransactions: [], // New property to track admin transactions\n//   stocks: {},\n// }\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.balance >= amount) {\n        user.balance -= amount;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically buy stocks for the admin\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount;\n        state.adminTransactions.push({\n          type: 'Admin Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically sell stocks for the admin\n        if (state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          user.balance += amount;\n          state.adminTransactions.push({\n            userId: 'admin',\n            // Assuming admin has a unique ID or placeholder\n            type: 'Admin Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n        }\n      }\n    }\n  }\n});\nexport const {\n  buyToken,\n  buyStockWithToken\n} = userSlice.actions;\nconst store = configureStore({\n  reducer: userSlice.reducer,\n  preloadedState: loadState()\n});\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport { store };","map":{"version":3,"names":["configureStore","createSlice","loadState","serializedState","localStorage","getItem","initialState","users","id","name","balance","tokens","stocks","transactions","adminTransactions","setItem","JSON","stringify","parse","err","undefined","saveState","state","userSlice","reducers","buyToken","action","userId","stock","amount","payload","user","find","push","type","timestamp","Date","toISOString","buyStockWithToken","actions","store","reducer","preloadedState","subscribe","getState"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/redux/Store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// Load state from localStorage\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      // Initialize the state in local storage if it doesn't exist\r\n      initialState = {\r\n        users: [\r\n          { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n          { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n          { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n          { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n        ],\r\n        transactions: [],\r\n        adminTransactions: [],\r\n        stocks: {},\r\n      }\r\n      localStorage.setItem('state', JSON.stringify(initialState))\r\n      return initialState\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n// Save state to localStorage\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    // Ignore write errors\r\n  }\r\n}\r\n\r\n// const initialState = loadState() || {\r\n//   users: [\r\n//     { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n//     { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n//     { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n//     { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n//   ],\r\n//   transactions: [],\r\n//   adminTransactions: [], // New property to track admin transactions\r\n//   stocks: {},\r\n// }\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.balance >= amount) {\r\n        user.balance -= amount\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically buy stocks for the admin\r\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount\r\n        state.adminTransactions.push({\r\n          type: 'Admin Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically sell stocks for the admin\r\n        if (state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount\r\n          user.balance += amount\r\n          state.adminTransactions.push({\r\n            userId: 'admin', // Assuming admin has a unique ID or placeholder\r\n            type: 'Admin Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n        }\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStockWithToken } = userSlice.actions\r\n\r\nconst store = configureStore({\r\n  reducer: userSlice.reducer,\r\n  preloadedState: loadState(),\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport { store }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}