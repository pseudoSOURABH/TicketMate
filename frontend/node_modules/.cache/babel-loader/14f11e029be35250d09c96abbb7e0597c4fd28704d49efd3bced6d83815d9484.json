{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// ... (rest of the loadState and saveState functions)\n\nconst initialState = loadState() || {\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }\n  // ... other users\n  ],\n\n  transactions: [],\n  stocks: {}\n};\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.balance >= amount) {\n        user.balance -= amount;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount; // Register token to user's record\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically buy stocks\n        if (!state.stocks[stock]) {\n          state.stocks[stock] = 0;\n        }\n        state.stocks[stock] += amount;\n        alert('Your stock has automatically bought as a user bought the token for that stock.');\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount; // Consume token from user's record\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount; // Register stock to user's record\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically sell stocks\n        if (state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          user.balance += amount;\n          state.transactions.push({\n            userId,\n            type: 'Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n          alert('Your stock has automatically sold as the same user bought the stock.');\n        }\n      }\n    }\n    // ... other reducers\n  }\n});\n\nexport const {\n  buyToken,\n  buyStockWithToken,\n  sellStock\n} = userSlice.actions;\nconst store = configureStore({\n  reducer: userSlice.reducer,\n  preloadedState: loadState()\n});\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport { store };","map":{"version":3,"names":["configureStore","createSlice","initialState","loadState","users","id","name","balance","tokens","stocks","transactions","userSlice","reducers","buyToken","state","action","userId","stock","amount","payload","user","find","push","type","timestamp","Date","toISOString","alert","buyStockWithToken","sellStock","actions","store","reducer","preloadedState","subscribe","saveState","getState"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Users.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// ... (rest of the loadState and saveState functions)\r\n\r\nconst initialState = loadState() || {\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n    // ... other users\r\n  ],\r\n  transactions: [],\r\n  stocks: {},\r\n}\r\n\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.balance >= amount) {\r\n        user.balance -= amount\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount // Register token to user's record\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically buy stocks\r\n        if (!state.stocks[stock]) {\r\n          state.stocks[stock] = 0\r\n        }\r\n        state.stocks[stock] += amount\r\n        alert(\r\n          'Your stock has automatically bought as a user bought the token for that stock.'\r\n        )\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount // Consume token from user's record\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount // Register stock to user's record\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically sell stocks\r\n        if (state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount\r\n          user.balance += amount\r\n          state.transactions.push({\r\n            userId,\r\n            type: 'Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n          alert(\r\n            'Your stock has automatically sold as the same user bought the stock.'\r\n          )\r\n        }\r\n      }\r\n    },\r\n    // ... other reducers\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStockWithToken, sellStock } = userSlice.actions\r\n\r\nconst store = configureStore({\r\n  reducer: userSlice.reducer,\r\n  preloadedState: loadState(),\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport { store }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}