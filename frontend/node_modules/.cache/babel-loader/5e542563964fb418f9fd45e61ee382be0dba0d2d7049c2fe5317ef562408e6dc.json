{"ast":null,"code":"var _jsxFileName = \"C:\\\\Persist_Task\\\\Tmate\\\\frontend\\\\src\\\\PersistComponent\\\\Stock\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Stock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialStocks = [{\n  name: 'AAPL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'GOOGL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'AMZN',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'MSFT',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'TSLA',\n  price: Math.floor(Math.random() * 1000)\n}];\nconst strategies = {\n  AAPL: price => price * (1 + Math.random() * 0.02 - 0.01),\n  GOOGL: price => price * (1 + 0.005 * Math.sin(Date.now() / 1000)),\n  AMZN: price => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\n  MSFT: price => price * (1 + 0.01 * Math.cos(Date.now() / 1000)),\n  TSLA: price => price * (1 + (Math.random() * 0.03 - 0.015))\n};\nconst initialChartData = {\n  labels: Array.from({\n    length: 60\n  }, (_, i) => i + 1),\n  datasets: initialStocks.map(stock => ({\n    label: stock.name,\n    data: Array.from({\n      length: 60\n    }, () => stock.price),\n    borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n    fill: false\n  }))\n};\nconst Stock = () => {\n  _s();\n  const [stocks, setStocks] = useState(initialStocks);\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name);\n  const [chartData, setChartData] = useState(initialChartData);\n  const prevPrices = useRef(initialStocks.map(stock => stock.price));\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => ({\n        ...stock,\n        price: strategies[stock.name](stock.price)\n      })));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const updateChartData = () => {\n      setChartData(prevData => ({\n        ...prevData,\n        datasets: prevData.datasets.map((dataset, index) => {\n          const stock = stocks.find(stock => stock.name === dataset.label);\n          dataset.data.push(stock.price);\n          if (dataset.data.length > 60) dataset.data.shift();\n          return dataset;\n        })\n      }));\n    };\n    updateChartData();\n\n    // Scroll chart to the right to show recent data\n    if (chartRef.current) {\n      chartRef.current.chartInstance.data.labels = chartData.labels;\n      chartRef.current.chartInstance.update('none');\n      const chartContainer = chartRef.current.chartInstance.chart.canvas.parentNode;\n      chartContainer.scrollLeft = chartContainer.scrollWidth - chartContainer.clientWidth;\n    }\n  }, [stocks]);\n  const handleStockSelect = stockName => {\n    setSelectedStock(stockName);\n  };\n  const selectedDataset = chartData.datasets.find(dataset => dataset.label === selectedStock);\n  const stockMovementColor = (currentPrice, prevPrice) => {\n    if (currentPrice > prevPrice) {\n      return 'green';\n    } else if (currentPrice < prevPrice) {\n      return 'red';\n    }\n    return 'black';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Trading Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stocks-list\",\n        children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stock-item ${stock.name === selectedStock ? 'selected' : ''}`,\n          onClick: () => handleStockSelect(stock.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: stock.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `price ${stockMovementColor(stock.price, prevPrices.current[index])}`,\n            children: stock.price.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), prevPrices.current[index] = stock.price]\n        }, stock.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: selectedDataset && /*#__PURE__*/_jsxDEV(Line, {\n          ref: chartRef,\n          data: {\n            labels: chartData.labels,\n            datasets: [selectedDataset]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 10\n                }\n              },\n              y: {\n                beginAtZero: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"M60V+tVh++HlNQwwKEdMrSmVAyg=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","jsxDEV","_jsxDEV","initialStocks","name","price","Math","floor","random","strategies","AAPL","GOOGL","sin","Date","now","AMZN","MSFT","cos","TSLA","initialChartData","labels","Array","from","length","_","i","datasets","map","stock","label","data","borderColor","toString","fill","Stock","_s","stocks","setStocks","selectedStock","setSelectedStock","chartData","setChartData","prevPrices","chartRef","interval","setInterval","prevStocks","clearInterval","updateChartData","prevData","dataset","index","find","push","shift","current","chartInstance","update","chartContainer","chart","canvas","parentNode","scrollLeft","scrollWidth","clientWidth","handleStockSelect","stockName","selectedDataset","stockMovementColor","currentPrice","prevPrice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toFixed","ref","options","scales","x","type","position","ticks","autoSkip","maxTicksLimit","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Stock/Stock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport 'chart.js/auto'\r\nimport './Stock.css'\r\n\r\nconst initialStocks = [\r\n  { name: 'AAPL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'GOOGL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'AMZN', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'MSFT', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'TSLA', price: Math.floor(Math.random() * 1000) },\r\n]\r\n\r\nconst strategies = {\r\n  AAPL: (price) => price * (1 + Math.random() * 0.02 - 0.01),\r\n  GOOGL: (price) => price * (1 + 0.005 * Math.sin(Date.now() / 1000)),\r\n  AMZN: (price) => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\r\n  MSFT: (price) => price * (1 + 0.01 * Math.cos(Date.now() / 1000)),\r\n  TSLA: (price) => price * (1 + (Math.random() * 0.03 - 0.015)),\r\n}\r\n\r\nconst initialChartData = {\r\n  labels: Array.from({ length: 60 }, (_, i) => i + 1),\r\n  datasets: initialStocks.map((stock) => ({\r\n    label: stock.name,\r\n    data: Array.from({ length: 60 }, () => stock.price),\r\n    borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n    fill: false,\r\n  })),\r\n}\r\n\r\nconst Stock = () => {\r\n  const [stocks, setStocks] = useState(initialStocks)\r\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name)\r\n  const [chartData, setChartData] = useState(initialChartData)\r\n  const prevPrices = useRef(initialStocks.map((stock) => stock.price))\r\n  const chartRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setStocks((prevStocks) =>\r\n        prevStocks.map((stock) => ({\r\n          ...stock,\r\n          price: strategies[stock.name](stock.price),\r\n        }))\r\n      )\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const updateChartData = () => {\r\n      setChartData((prevData) => ({\r\n        ...prevData,\r\n        datasets: prevData.datasets.map((dataset, index) => {\r\n          const stock = stocks.find((stock) => stock.name === dataset.label)\r\n          dataset.data.push(stock.price)\r\n          if (dataset.data.length > 60) dataset.data.shift()\r\n          return dataset\r\n        }),\r\n      }))\r\n    }\r\n\r\n    updateChartData()\r\n\r\n    // Scroll chart to the right to show recent data\r\n    if (chartRef.current) {\r\n      chartRef.current.chartInstance.data.labels = chartData.labels\r\n      chartRef.current.chartInstance.update('none')\r\n      const chartContainer =\r\n        chartRef.current.chartInstance.chart.canvas.parentNode\r\n      chartContainer.scrollLeft =\r\n        chartContainer.scrollWidth - chartContainer.clientWidth\r\n    }\r\n  }, [stocks])\r\n\r\n  const handleStockSelect = (stockName) => {\r\n    setSelectedStock(stockName)\r\n  }\r\n\r\n  const selectedDataset = chartData.datasets.find(\r\n    (dataset) => dataset.label === selectedStock\r\n  )\r\n\r\n  const stockMovementColor = (currentPrice, prevPrice) => {\r\n    if (currentPrice > prevPrice) {\r\n      return 'green'\r\n    } else if (currentPrice < prevPrice) {\r\n      return 'red'\r\n    }\r\n    return 'black'\r\n  }\r\n\r\n  return (\r\n    <div className=\"stock-container\">\r\n      <h1>Stock Trading Platform</h1>\r\n      <div className=\"main-content\">\r\n        <div className=\"stocks-list\">\r\n          {stocks.map((stock, index) => (\r\n            <div\r\n              key={stock.name}\r\n              className={`stock-item ${\r\n                stock.name === selectedStock ? 'selected' : ''\r\n              }`}\r\n              onClick={() => handleStockSelect(stock.name)}\r\n            >\r\n              <span>{stock.name}</span>\r\n              <span\r\n                className={`price ${stockMovementColor(\r\n                  stock.price,\r\n                  prevPrices.current[index]\r\n                )}`}\r\n              >\r\n                {stock.price.toFixed(2)}\r\n              </span>\r\n              {(prevPrices.current[index] = stock.price)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          {selectedDataset && (\r\n            <Line\r\n              ref={chartRef}\r\n              data={{\r\n                labels: chartData.labels,\r\n                datasets: [selectedDataset],\r\n              }}\r\n              options={{\r\n                scales: {\r\n                  x: {\r\n                    type: 'linear',\r\n                    position: 'bottom',\r\n                    ticks: {\r\n                      autoSkip: true,\r\n                      maxTicksLimit: 10,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    beginAtZero: false,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stock\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}