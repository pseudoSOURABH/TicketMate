{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// Load state from localStorage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// Save state to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    // Ignore write errors\n  }\n};\nconst initialState = loadState() || {\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 2,\n    name: 'User2',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }\n  // ... other users\n  ],\n\n  transactions: [],\n  stocks: {}\n};\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.balance >= amount) {\n        user.balance -= amount;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically buy stocks\n        if (!state.stocks[stock]) {\n          state.stocks[stock] = 0;\n        }\n        state.stocks[stock] += amount;\n        alert('Your stock has automatically bought as a user bought the token for that stock.');\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically sell stocks\n        if (state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          user.balance += amount;\n          state.transactions.push({\n            userId,\n            type: 'Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n          alert('Your stock has automatically sold as the same user bought the stock.');\n        }\n      }\n    },\n    sellStock: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.stocks[stock] >= amount) {\n        user.stocks[stock] -= amount;\n        user.balance += amount; // Assuming the stock is sold at the same price it was bought\n        state.transactions.push({\n          userId,\n          type: 'Sell Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n  }\n});\nexport const {\n  buyToken,\n  buyStockWithToken,\n  sellStock\n} = userSlice.actions;\nconst store = configureStore({\n  reducer: userSlice.reducer,\n  preloadedState: loadState()\n});\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","saveState","state","stringify","setItem","initialState","users","id","name","balance","tokens","stocks","transactions","userSlice","reducers","buyToken","action","userId","stock","amount","payload","user","find","push","type","timestamp","Date","toISOString","alert","buyStockWithToken","sellStock","actions","store","reducer","preloadedState","subscribe","getState"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/redux/Store.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'\r\n\r\n// Load state from localStorage\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n// Save state to localStorage\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    // Ignore write errors\r\n  }\r\n}\r\n\r\nconst initialState = loadState() || {\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n    // ... other users\r\n  ],\r\n  transactions: [],\r\n  stocks: {},\r\n}\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.balance >= amount) {\r\n        user.balance -= amount\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically buy stocks\r\n        if (!state.stocks[stock]) {\r\n          state.stocks[stock] = 0\r\n        }\r\n        state.stocks[stock] += amount\r\n        alert(\r\n          'Your stock has automatically bought as a user bought the token for that stock.'\r\n        )\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n\r\n        // Automatically sell stocks\r\n        if (state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount\r\n          user.balance += amount\r\n          state.transactions.push({\r\n            userId,\r\n            type: 'Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          })\r\n          alert(\r\n            'Your stock has automatically sold as the same user bought the stock.'\r\n          )\r\n        }\r\n      }\r\n    },\r\n    sellStock: (state, action) => {\r\n      const { userId, stock, amount } = action.payload\r\n      const user = state.users.find((user) => user.id === userId)\r\n      if (user && user.stocks[stock] >= amount) {\r\n        user.stocks[stock] -= amount\r\n        user.balance += amount // Assuming the stock is sold at the same price it was bought\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Sell Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        })\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { buyToken, buyStockWithToken, sellStock } = userSlice.actions\r\n\r\nconst store = configureStore({\r\n  reducer: userSlice.reducer,\r\n  preloadedState: loadState(),\r\n})\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState())\r\n})\r\n\r\nexport default store\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}