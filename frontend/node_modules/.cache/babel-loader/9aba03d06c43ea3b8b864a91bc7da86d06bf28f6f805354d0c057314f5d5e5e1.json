{"ast":null,"code":"const initialState = loadState() || {\n  users: [{\n    id: 1,\n    name: 'User1',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 2,\n    name: 'User2',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 3,\n    name: 'User3',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }, {\n    id: 4,\n    name: 'User4',\n    balance: 100000,\n    tokens: {},\n    stocks: {}\n  }],\n  transactions: [],\n  // Initialize transactions as an empty array\n  adminTransactions: [],\n  // Initialize adminTransactions as an empty array\n  stocks: {}\n};\n\n// Create slice\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    buyToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.balance >= amount) {\n        user.balance -= amount;\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Token',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically buy stocks for the admin\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount;\n        state.adminTransactions.push({\n          type: 'Admin Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n      }\n    },\n    buyStockWithToken: (state, action) => {\n      const {\n        userId,\n        stock,\n        amount\n      } = action.payload;\n      const user = state.users.find(user => user.id === userId);\n      if (user && user.tokens[stock] >= amount) {\n        user.tokens[stock] -= amount;\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\n        state.transactions.push({\n          userId,\n          type: 'Buy Stock',\n          stock,\n          amount,\n          timestamp: new Date().toISOString()\n        });\n\n        // Automatically sell stocks for the admin\n        if (state.stocks[stock] >= amount) {\n          state.stocks[stock] -= amount;\n          user.balance += amount;\n          state.adminTransactions.push({\n            userId: 'admin',\n            // Assuming admin has a unique ID or placeholder\n            type: 'Admin Sell Stock',\n            stock,\n            amount,\n            timestamp: new Date().toISOString()\n          });\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["initialState","loadState","users","id","name","balance","tokens","stocks","transactions","adminTransactions","userSlice","createSlice","reducers","buyToken","state","action","userId","stock","amount","payload","user","find","push","type","timestamp","Date","toISOString","buyStockWithToken"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/redux/Store.js"],"sourcesContent":["const initialState = loadState() || {\r\n  users: [\r\n    { id: 1, name: 'User1', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 2, name: 'User2', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 3, name: 'User3', balance: 100000, tokens: {}, stocks: {} },\r\n    { id: 4, name: 'User4', balance: 100000, tokens: {}, stocks: {} },\r\n  ],\r\n  transactions: [], // Initialize transactions as an empty array\r\n  adminTransactions: [], // Initialize adminTransactions as an empty array\r\n  stocks: {},\r\n};\r\n\r\n// Create slice\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    buyToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload;\r\n      const user = state.users.find((user) => user.id === userId);\r\n      if (user && user.balance >= amount) {\r\n        user.balance -= amount;\r\n        user.tokens[stock] = (user.tokens[stock] || 0) + amount;\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Token',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n\r\n        // Automatically buy stocks for the admin\r\n        state.stocks[stock] = (state.stocks[stock] || 0) + amount;\r\n        state.adminTransactions.push({\r\n          type: 'Admin Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n      }\r\n    },\r\n    buyStockWithToken: (state, action) => {\r\n      const { userId, stock, amount } = action.payload;\r\n      const user = state.users.find((user) => user.id === userId);\r\n      if (user && user.tokens[stock] >= amount) {\r\n        user.tokens[stock] -= amount;\r\n        user.stocks[stock] = (user.stocks[stock] || 0) + amount;\r\n        state.transactions.push({\r\n          userId,\r\n          type: 'Buy Stock',\r\n          stock,\r\n          amount,\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n\r\n        // Automatically sell stocks for the admin\r\n        if (state.stocks[stock] >= amount) {\r\n          state.stocks[stock] -= amount;\r\n          user.balance += amount;\r\n          state.adminTransactions.push({\r\n            userId: 'admin', // Assuming admin has a unique ID or placeholder\r\n            type: 'Admin Sell Stock',\r\n            stock,\r\n            amount,\r\n            timestamp: new Date().toISOString(),\r\n          });\r\n        }\r\n      }\r\n    },\r\n  },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}