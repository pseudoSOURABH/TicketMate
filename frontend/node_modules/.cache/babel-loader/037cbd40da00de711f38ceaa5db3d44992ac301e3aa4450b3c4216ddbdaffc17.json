{"ast":null,"code":"var _jsxFileName = \"C:\\\\Persist_Task\\\\Tmate\\\\frontend\\\\src\\\\PersistComponent\\\\Stock\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Stock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialStocks = [{\n  name: 'AAPL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'GOOGL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'AMZN',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'MSFT',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'TSLA',\n  price: Math.floor(Math.random() * 1000)\n}];\nconst strategies = {\n  AAPL: price => price * (1 + (Math.random() * 0.02 - 0.01)),\n  GOOGL: price => price * (1 + 0.01 * Math.sin(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\n  AMZN: price => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\n  MSFT: price => price * (1 + 0.01 * Math.cos(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\n  TSLA: price => price * (1 + (Math.random() * 0.03 - 0.015))\n};\nconst timeIntervals = {\n  '2 minutes': 120,\n  '3 minutes': 180,\n  '5 minutes': 300,\n  '10 minutes': 600,\n  '15 minutes': 900,\n  '30 minutes': 1800,\n  '45 minutes': 2700,\n  '60 minutes': 3600,\n  '2 hours': 7200,\n  '3 hours': 10800\n};\nconst Stock = () => {\n  _s();\n  const [stocks, setStocks] = useState(initialStocks);\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name);\n  const [chartData, setChartData] = useState({\n    labels: Array.from({\n      length: 50\n    }, (_, i) => i),\n    datasets: initialStocks.map(stock => ({\n      label: stock.name,\n      data: Array(50).fill(stock.price),\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n      fill: false\n    }))\n  });\n  const [baselines, setBaselines] = useState(initialStocks.reduce((acc, stock) => ({\n    ...acc,\n    [stock.name]: stock.price\n  }), {}));\n  const [timeInterval, setTimeInterval] = useState('2 minutes');\n  const priceHistory = useRef(initialStocks.reduce((acc, stock) => ({\n    ...acc,\n    [stock.name]: [stock.price]\n  }), {}));\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => {\n        const newPrice = strategies[stock.name](stock.price);\n        return {\n          ...stock,\n          price: newPrice\n        };\n      }));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const updateBaselines = () => {\n      setBaselines(prevBaselines => stocks.reduce((acc, stock) => {\n        const history = priceHistory.current[stock.name];\n        const avgPrice = history.reduce((sum, price) => sum + price, 0) / history.length;\n        return {\n          ...acc,\n          [stock.name]: avgPrice\n        };\n      }, {}));\n    };\n    const interval = setInterval(() => {\n      stocks.forEach(stock => {\n        priceHistory.current[stock.name].push(stock.price);\n        if (priceHistory.current[stock.name].length > 7200) {\n          priceHistory.current[stock.name].shift();\n        }\n      });\n      updateBaselines();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, [stocks]);\n  useEffect(() => {\n    setChartData(prevData => ({\n      ...prevData,\n      datasets: prevData.datasets.map((dataset, index) => {\n        const stock = stocks.find(stock => stock.name === dataset.label);\n        dataset.data.push(stock.price);\n        if (dataset.data.length > timeIntervals[timeInterval]) dataset.data.shift();\n        dataset.pointBackgroundColor = stock.price >= baselines[stock.name] ? 'green' : 'red';\n        return dataset;\n      })\n    }));\n  }, [stocks, baselines, timeInterval]);\n  const handleStockSelect = stockName => {\n    setSelectedStock(stockName);\n  };\n  const handleTimeIntervalChange = event => {\n    setTimeInterval(event.target.value);\n  };\n  const selectedDataset = chartData.datasets.find(dataset => dataset.label === selectedStock);\n  const baselineDataset = {\n    label: 'Baseline',\n    data: selectedDataset ? Array(selectedDataset.data.length).fill(baselines[selectedStock]) : [],\n    borderColor: 'gray',\n    borderDash: [5, 5],\n    fill: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Trading Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stocks-list\",\n        children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stock-item ${stock.name === selectedStock ? 'selected' : ''}`,\n          onClick: () => handleStockSelect(stock.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: stock.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `price ${stock.price >= baselines[stock.name] ? 'price-up' : 'price-down'}`,\n            children: stock.price.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)]\n        }, stock.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: timeInterval,\n          onChange: handleTimeIntervalChange,\n          className: \"time-interval-selector\",\n          children: Object.keys(timeIntervals).map(interval => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: interval,\n            children: interval\n          }, interval, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), selectedDataset && /*#__PURE__*/_jsxDEV(Line, {\n          ref: chartRef,\n          data: {\n            labels: chartData.labels,\n            datasets: [selectedDataset, baselineDataset]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 10\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"pnTpDvH2+I0IV9+XVnBLukqjFQY=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","jsxDEV","_jsxDEV","initialStocks","name","price","Math","floor","random","strategies","AAPL","GOOGL","sin","Date","now","AMZN","MSFT","cos","TSLA","timeIntervals","Stock","_s","stocks","setStocks","selectedStock","setSelectedStock","chartData","setChartData","labels","Array","from","length","_","i","datasets","map","stock","label","data","fill","borderColor","toString","baselines","setBaselines","reduce","acc","timeInterval","setTimeInterval","priceHistory","chartRef","interval","setInterval","prevStocks","newPrice","clearInterval","updateBaselines","prevBaselines","history","current","avgPrice","sum","forEach","push","shift","prevData","dataset","index","find","pointBackgroundColor","handleStockSelect","stockName","handleTimeIntervalChange","event","target","value","selectedDataset","baselineDataset","borderDash","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toFixed","onChange","Object","keys","ref","options","scales","x","type","position","ticks","autoSkip","maxTicksLimit","_c","$RefreshReg$"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Stock/Stock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport 'chart.js/auto'\r\nimport './Stock.css'\r\n\r\nconst initialStocks = [\r\n  { name: 'AAPL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'GOOGL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'AMZN', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'MSFT', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'TSLA', price: Math.floor(Math.random() * 1000) },\r\n]\r\n\r\nconst strategies = {\r\n  AAPL: (price) => price * (1 + (Math.random() * 0.02 - 0.01)),\r\n  GOOGL: (price) =>\r\n    price *\r\n    (1 + 0.01 * Math.sin(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\r\n  AMZN: (price) => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\r\n  MSFT: (price) =>\r\n    price *\r\n    (1 + 0.01 * Math.cos(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\r\n  TSLA: (price) => price * (1 + (Math.random() * 0.03 - 0.015)),\r\n}\r\n\r\nconst timeIntervals = {\r\n  '2 minutes': 120,\r\n  '3 minutes': 180,\r\n  '5 minutes': 300,\r\n  '10 minutes': 600,\r\n  '15 minutes': 900,\r\n  '30 minutes': 1800,\r\n  '45 minutes': 2700,\r\n  '60 minutes': 3600,\r\n  '2 hours': 7200,\r\n  '3 hours': 10800,\r\n}\r\n\r\nconst Stock = () => {\r\n  const [stocks, setStocks] = useState(initialStocks)\r\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name)\r\n  const [chartData, setChartData] = useState({\r\n    labels: Array.from({ length: 50 }, (_, i) => i),\r\n    datasets: initialStocks.map((stock) => ({\r\n      label: stock.name,\r\n      data: Array(50).fill(stock.price),\r\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n      fill: false,\r\n    })),\r\n  })\r\n  const [baselines, setBaselines] = useState(\r\n    initialStocks.reduce(\r\n      (acc, stock) => ({ ...acc, [stock.name]: stock.price }),\r\n      {}\r\n    )\r\n  )\r\n  const [timeInterval, setTimeInterval] = useState('2 minutes')\r\n  const priceHistory = useRef(\r\n    initialStocks.reduce(\r\n      (acc, stock) => ({ ...acc, [stock.name]: [stock.price] }),\r\n      {}\r\n    )\r\n  )\r\n  const chartRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setStocks((prevStocks) =>\r\n        prevStocks.map((stock) => {\r\n          const newPrice = strategies[stock.name](stock.price)\r\n          return {\r\n            ...stock,\r\n            price: newPrice,\r\n          }\r\n        })\r\n      )\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const updateBaselines = () => {\r\n      setBaselines((prevBaselines) =>\r\n        stocks.reduce((acc, stock) => {\r\n          const history = priceHistory.current[stock.name]\r\n          const avgPrice =\r\n            history.reduce((sum, price) => sum + price, 0) / history.length\r\n          return { ...acc, [stock.name]: avgPrice }\r\n        }, {})\r\n      )\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      stocks.forEach((stock) => {\r\n        priceHistory.current[stock.name].push(stock.price)\r\n        if (priceHistory.current[stock.name].length > 7200) {\r\n          priceHistory.current[stock.name].shift()\r\n        }\r\n      })\r\n      updateBaselines()\r\n    }, 2000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [stocks])\r\n\r\n  useEffect(() => {\r\n    setChartData((prevData) => ({\r\n      ...prevData,\r\n      datasets: prevData.datasets.map((dataset, index) => {\r\n        const stock = stocks.find((stock) => stock.name === dataset.label)\r\n        dataset.data.push(stock.price)\r\n        if (dataset.data.length > timeIntervals[timeInterval])\r\n          dataset.data.shift()\r\n        dataset.pointBackgroundColor =\r\n          stock.price >= baselines[stock.name] ? 'green' : 'red'\r\n        return dataset\r\n      }),\r\n    }))\r\n  }, [stocks, baselines, timeInterval])\r\n\r\n  const handleStockSelect = (stockName) => {\r\n    setSelectedStock(stockName)\r\n  }\r\n\r\n  const handleTimeIntervalChange = (event) => {\r\n    setTimeInterval(event.target.value)\r\n  }\r\n\r\n  const selectedDataset = chartData.datasets.find(\r\n    (dataset) => dataset.label === selectedStock\r\n  )\r\n  const baselineDataset = {\r\n    label: 'Baseline',\r\n    data: selectedDataset\r\n      ? Array(selectedDataset.data.length).fill(baselines[selectedStock])\r\n      : [],\r\n    borderColor: 'gray',\r\n    borderDash: [5, 5],\r\n    fill: false,\r\n  }\r\n\r\n  return (\r\n    <div className=\"stock-container\">\r\n      <h1>Stock Trading Platform</h1>\r\n      <div className=\"main-content\">\r\n        <div className=\"stocks-list\">\r\n          {stocks.map((stock, index) => (\r\n            <div\r\n              key={stock.name}\r\n              className={`stock-item ${\r\n                stock.name === selectedStock ? 'selected' : ''\r\n              }`}\r\n              onClick={() => handleStockSelect(stock.name)}\r\n            >\r\n              <span>{stock.name}</span>\r\n              <span\r\n                className={`price ${\r\n                  stock.price >= baselines[stock.name]\r\n                    ? 'price-up'\r\n                    : 'price-down'\r\n                }`}\r\n              >\r\n                {stock.price.toFixed(2)}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <select\r\n            value={timeInterval}\r\n            onChange={handleTimeIntervalChange}\r\n            className=\"time-interval-selector\"\r\n          >\r\n            {Object.keys(timeIntervals).map((interval) => (\r\n              <option key={interval} value={interval}>\r\n                {interval}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {selectedDataset && (\r\n            <Line\r\n              ref={chartRef}\r\n              data={{\r\n                labels: chartData.labels,\r\n                datasets: [selectedDataset, baselineDataset],\r\n              }}\r\n              options={{\r\n                scales: {\r\n                  x: {\r\n                    type: 'linear',\r\n                    position: 'bottom',\r\n                    ticks: {\r\n                      autoSkip: true,\r\n                      maxTicksLimit: 10,\r\n                    },\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stock\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}