{"ast":null,"code":"var _jsxFileName = \"C:\\\\Persist_Task\\\\Tmate\\\\frontend\\\\src\\\\PersistComponent\\\\Stock\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Stock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialStocks = [{\n  name: 'AAPL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'GOOGL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'AMZN',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'MSFT',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'TSLA',\n  price: Math.floor(Math.random() * 1000)\n}];\nconst strategies = {\n  AAPL: price => price * (1 + (Math.random() * 0.02 - 0.01)),\n  GOOGL: price => price * (1 + 0.01 * Math.sin(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\n  AMZN: price => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\n  MSFT: price => price * (1 + 0.01 * Math.cos(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\n  TSLA: price => price * (1 + (Math.random() * 0.03 - 0.015))\n};\nconst Stock = () => {\n  _s();\n  const [stocks, setStocks] = useState(initialStocks);\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name);\n  const [chartData, setChartData] = useState({\n    labels: Array.from({\n      length: 60\n    }, (_, i) => i + 1),\n    datasets: initialStocks.map(stock => ({\n      label: stock.name,\n      data: Array.from({\n        length: 60\n      }, () => stock.price),\n      // Initialize data with starting values\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n      fill: false,\n      pointRadius: 0\n    }))\n  });\n  const [baselines, setBaselines] = useState(initialStocks.reduce((acc, stock) => ({\n    ...acc,\n    [stock.name]: stock.price\n  }), {}));\n  const [timeSpan, setTimeSpan] = useState(60); // Default to 60 minutes\n  const chartRef = useRef(null);\n  const priceHistory = useRef(initialStocks.reduce((acc, stock) => ({\n    ...acc,\n    [stock.name]: []\n  }), {}));\n  useEffect(() => {\n    const updateChartData = () => {\n      setChartData(prevData => {\n        const labels = Array.from({\n          length: prevData.labels.length + 1\n        }, (_, i) => i);\n        const datasets = prevData.datasets.map(dataset => {\n          const stock = stocks.find(stock => stock.name === dataset.label);\n          return {\n            ...dataset,\n            data: [...dataset.data.slice(1), stock.price] // Update data with new price, removing oldest\n          };\n        });\n\n        return {\n          labels,\n          datasets\n        };\n      });\n    };\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => {\n        const newPrice = strategies[stock.name](stock.price);\n        priceHistory.current[stock.name].push(newPrice);\n        if (priceHistory.current[stock.name].length > timeSpan * 60) {\n          priceHistory.current[stock.name].shift();\n        }\n        return {\n          ...stock,\n          price: newPrice\n        };\n      }));\n      updateChartData(); // Call updateChartData after setting new prices\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timeSpan]);\n  useEffect(() => {\n    const updateBaselines = () => {\n      setBaselines(prevBaselines => stocks.reduce((acc, stock) => {\n        const history = priceHistory.current[stock.name];\n        const avgPrice = history.reduce((sum, price) => sum + price, 0) / history.length;\n        return {\n          ...acc,\n          [stock.name]: avgPrice\n        };\n      }, {}));\n    };\n    const interval = setInterval(() => {\n      updateBaselines();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [stocks]);\n  useEffect(() => {\n    // Initialize chart with initial data\n    initialStocks.forEach(stock => {\n      priceHistory.current[stock.name] = Array(timeSpan * 60).fill(stock.price);\n    });\n\n    // Set initial labels based on time span\n    const labels = Array.from({\n      length: timeSpan * 60\n    }, (_, i) => i + 1);\n    setChartData(prevData => ({\n      ...prevData,\n      labels\n    }));\n\n    // Scroll chart to the right to show recent data\n    if (chartRef.current) {\n      chartRef.current.chartInstance.data.labels = labels;\n      chartRef.current.chartInstance.update('none');\n      const chartContainer = chartRef.current.chartInstance.chart.canvas.parentNode;\n      chartContainer.scrollLeft = chartContainer.scrollWidth - chartContainer.clientWidth;\n    }\n  }, [timeSpan]);\n  const handleStockSelect = stockName => {\n    setSelectedStock(stockName);\n  };\n  const selectedDataset = chartData.datasets.find(dataset => dataset.label === selectedStock);\n  const baselineDataset = {\n    label: 'Base Line',\n    data: selectedDataset ? Array(selectedDataset.data.length).fill(baselines[selectedStock]) : [],\n    borderColor: 'rgba(0, 0, 0, 0.4)',\n    borderWidth: 2,\n    borderDash: [5, 5],\n    fill: false,\n    pointRadius: 0\n  };\n  const stockMovementColor = (currentPrice, initialPrice) => {\n    if (currentPrice > initialPrice) {\n      return 'green';\n    } else if (currentPrice < initialPrice) {\n      return 'red';\n    } else {\n      return 'black';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Trading Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stocks-list\",\n        children: stocks.map(stock => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stock-item ${stockMovementColor(stock.price, stock.initialPrice)}`,\n          onClick: () => handleStockSelect(stock.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: stock.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"price\",\n            children: stock.price.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this)]\n        }, stock.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-scroll\",\n            ref: chartRef,\n            children: selectedDataset && /*#__PURE__*/_jsxDEV(Line, {\n              data: {\n                labels: chartData.labels,\n                datasets: [selectedDataset, baselineDataset]\n              },\n              options: {\n                scales: {\n                  x: {\n                    type: 'linear',\n                    position: 'bottom',\n                    ticks: {\n                      autoSkip: true,\n                      maxTicksLimit: 10\n                    }\n                  },\n                  y: {\n                    beginAtZero: false\n                  }\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"3ykYo+V1esyznKlZm8WdeDGvhVA=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","jsxDEV","_jsxDEV","initialStocks","name","price","Math","floor","random","strategies","AAPL","GOOGL","sin","Date","now","AMZN","MSFT","cos","TSLA","Stock","_s","stocks","setStocks","selectedStock","setSelectedStock","chartData","setChartData","labels","Array","from","length","_","i","datasets","map","stock","label","data","borderColor","toString","fill","pointRadius","baselines","setBaselines","reduce","acc","timeSpan","setTimeSpan","chartRef","priceHistory","updateChartData","prevData","dataset","find","slice","interval","setInterval","prevStocks","newPrice","current","push","shift","clearInterval","updateBaselines","prevBaselines","history","avgPrice","sum","forEach","chartInstance","update","chartContainer","chart","canvas","parentNode","scrollLeft","scrollWidth","clientWidth","handleStockSelect","stockName","selectedDataset","baselineDataset","borderWidth","borderDash","stockMovementColor","currentPrice","initialPrice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toFixed","ref","options","scales","x","type","position","ticks","autoSkip","maxTicksLimit","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Stock/Stock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport 'chart.js/auto'\r\nimport './Stock.css'\r\n\r\nconst initialStocks = [\r\n  { name: 'AAPL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'GOOGL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'AMZN', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'MSFT', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'TSLA', price: Math.floor(Math.random() * 1000) },\r\n]\r\n\r\nconst strategies = {\r\n  AAPL: (price) => price * (1 + (Math.random() * 0.02 - 0.01)),\r\n  GOOGL: (price) =>\r\n    price *\r\n    (1 + 0.01 * Math.sin(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\r\n  AMZN: (price) => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\r\n  MSFT: (price) =>\r\n    price *\r\n    (1 + 0.01 * Math.cos(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\r\n  TSLA: (price) => price * (1 + (Math.random() * 0.03 - 0.015)),\r\n}\r\n\r\nconst Stock = () => {\r\n  const [stocks, setStocks] = useState(initialStocks)\r\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name)\r\n  const [chartData, setChartData] = useState({\r\n    labels: Array.from({ length: 60 }, (_, i) => i + 1),\r\n    datasets: initialStocks.map((stock) => ({\r\n      label: stock.name,\r\n      data: Array.from({ length: 60 }, () => stock.price), // Initialize data with starting values\r\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n      fill: false,\r\n      pointRadius: 0,\r\n    })),\r\n  })\r\n  const [baselines, setBaselines] = useState(\r\n    initialStocks.reduce(\r\n      (acc, stock) => ({ ...acc, [stock.name]: stock.price }),\r\n      {}\r\n    )\r\n  )\r\n  const [timeSpan, setTimeSpan] = useState(60) // Default to 60 minutes\r\n  const chartRef = useRef(null)\r\n  const priceHistory = useRef(\r\n    initialStocks.reduce((acc, stock) => ({ ...acc, [stock.name]: [] }), {})\r\n  )\r\n\r\n  useEffect(() => {\r\n    const updateChartData = () => {\r\n      setChartData((prevData) => {\r\n        const labels = Array.from(\r\n          { length: prevData.labels.length + 1 },\r\n          (_, i) => i\r\n        )\r\n        const datasets = prevData.datasets.map((dataset) => {\r\n          const stock = stocks.find((stock) => stock.name === dataset.label)\r\n          return {\r\n            ...dataset,\r\n            data: [...dataset.data.slice(1), stock.price], // Update data with new price, removing oldest\r\n          }\r\n        })\r\n        return { labels, datasets }\r\n      })\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      setStocks((prevStocks) =>\r\n        prevStocks.map((stock) => {\r\n          const newPrice = strategies[stock.name](stock.price)\r\n          priceHistory.current[stock.name].push(newPrice)\r\n          if (priceHistory.current[stock.name].length > timeSpan * 60) {\r\n            priceHistory.current[stock.name].shift()\r\n          }\r\n          return {\r\n            ...stock,\r\n            price: newPrice,\r\n          }\r\n        })\r\n      )\r\n      updateChartData() // Call updateChartData after setting new prices\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [timeSpan])\r\n\r\n  useEffect(() => {\r\n    const updateBaselines = () => {\r\n      setBaselines((prevBaselines) =>\r\n        stocks.reduce((acc, stock) => {\r\n          const history = priceHistory.current[stock.name]\r\n          const avgPrice =\r\n            history.reduce((sum, price) => sum + price, 0) / history.length\r\n          return { ...acc, [stock.name]: avgPrice }\r\n        }, {})\r\n      )\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      updateBaselines()\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [stocks])\r\n\r\n  useEffect(() => {\r\n    // Initialize chart with initial data\r\n    initialStocks.forEach((stock) => {\r\n      priceHistory.current[stock.name] = Array(timeSpan * 60).fill(stock.price)\r\n    })\r\n\r\n    // Set initial labels based on time span\r\n    const labels = Array.from({ length: timeSpan * 60 }, (_, i) => i + 1)\r\n    setChartData((prevData) => ({\r\n      ...prevData,\r\n      labels,\r\n    }))\r\n\r\n    // Scroll chart to the right to show recent data\r\n    if (chartRef.current) {\r\n      chartRef.current.chartInstance.data.labels = labels\r\n      chartRef.current.chartInstance.update('none')\r\n      const chartContainer =\r\n        chartRef.current.chartInstance.chart.canvas.parentNode\r\n      chartContainer.scrollLeft =\r\n        chartContainer.scrollWidth - chartContainer.clientWidth\r\n    }\r\n  }, [timeSpan])\r\n\r\n  const handleStockSelect = (stockName) => {\r\n    setSelectedStock(stockName)\r\n  }\r\n\r\n  const selectedDataset = chartData.datasets.find(\r\n    (dataset) => dataset.label === selectedStock\r\n  )\r\n  const baselineDataset = {\r\n    label: 'Base Line',\r\n    data: selectedDataset\r\n      ? Array(selectedDataset.data.length).fill(baselines[selectedStock])\r\n      : [],\r\n    borderColor: 'rgba(0, 0, 0, 0.4)',\r\n    borderWidth: 2,\r\n    borderDash: [5, 5],\r\n    fill: false,\r\n    pointRadius: 0,\r\n  }\r\n\r\n  const stockMovementColor = (currentPrice, initialPrice) => {\r\n    if (currentPrice > initialPrice) {\r\n      return 'green'\r\n    } else if (currentPrice < initialPrice) {\r\n      return 'red'\r\n    } else {\r\n      return 'black'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"stock-container\">\r\n      <h1>Stock Trading Platform</h1>\r\n      <div className=\"main-content\">\r\n        <div className=\"stocks-list\">\r\n          {stocks.map((stock) => (\r\n            <div\r\n              key={stock.name}\r\n              className={`stock-item ${stockMovementColor(\r\n                stock.price,\r\n                stock.initialPrice\r\n              )}`}\r\n              onClick={() => handleStockSelect(stock.name)}\r\n            >\r\n              <span>{stock.name}</span>\r\n              <span className=\"price\">{stock.price.toFixed(2)}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <div className=\"chart-wrapper\">\r\n            <div className=\"chart-scroll\" ref={chartRef}>\r\n              {selectedDataset && (\r\n                <Line\r\n                  data={{\r\n                    labels: chartData.labels,\r\n                    datasets: [selectedDataset, baselineDataset],\r\n                  }}\r\n                  options={{\r\n                    scales: {\r\n                      x: {\r\n                        type: 'linear',\r\n                        position: 'bottom',\r\n                        ticks: {\r\n                          autoSkip: true,\r\n                          maxTicksLimit: 10,\r\n                        },\r\n                      },\r\n                      y: {\r\n                        beginAtZero: false,\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stock\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}