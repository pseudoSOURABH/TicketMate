{"ast":null,"code":"var _jsxFileName = \"C:\\\\Persist_Task\\\\Tmate\\\\frontend\\\\src\\\\PersistComponent\\\\Stock\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Stock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialStocks = [{\n  name: 'AAPL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'GOOGL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'AMZN',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'MSFT',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'TSLA',\n  price: Math.floor(Math.random() * 1000)\n}];\nconst strategies = {\n  AAPL: price => price * (1 + (Math.random() * 0.02 - 0.01)),\n  GOOGL: price => price * (1 + 0.01 * Math.sin(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\n  AMZN: price => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\n  MSFT: price => price * (1 + 0.01 * Math.cos(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\n  TSLA: price => price * (1 + (Math.random() * 0.03 - 0.015))\n};\nconst Stock = () => {\n  _s();\n  const [stocks, setStocks] = useState(initialStocks);\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name);\n  const [chartData, setChartData] = useState({\n    labels: Array.from({\n      length: 50\n    }, (_, i) => i),\n    datasets: initialStocks.map(stock => ({\n      label: stock.name,\n      data: Array(50).fill(stock.price),\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n      fill: false,\n      pointRadius: 0\n    }))\n  });\n  const [baselines, setBaselines] = useState(initialStocks.reduce((acc, stock) => ({\n    ...acc,\n    [stock.name]: stock.price\n  }), {}));\n  const priceHistory = useRef(initialStocks.reduce((acc, stock) => ({\n    ...acc,\n    [stock.name]: [stock.price]\n  }), {}));\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => {\n        const newPrice = strategies[stock.name](stock.price);\n        return {\n          ...stock,\n          price: newPrice\n        };\n      }));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const updateBaselines = () => {\n      setBaselines(prevBaselines => stocks.reduce((acc, stock) => {\n        const history = priceHistory.current[stock.name];\n        const avgPrice = history.reduce((sum, price) => sum + price, 0) / history.length;\n        return {\n          ...acc,\n          [stock.name]: avgPrice\n        };\n      }, {}));\n    };\n    const interval = setInterval(() => {\n      stocks.forEach(stock => {\n        priceHistory.current[stock.name].push(stock.price);\n        if (priceHistory.current[stock.name].length > 50) {\n          priceHistory.current[stock.name].shift();\n        }\n      });\n      updateBaselines();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [stocks]);\n  useEffect(() => {\n    setChartData(prevData => ({\n      ...prevData,\n      datasets: prevData.datasets.map((dataset, index) => {\n        const stock = stocks.find(stock => stock.name === dataset.label);\n        dataset.data.push(stock.price);\n        if (dataset.data.length > 50) dataset.data.shift();\n        return dataset;\n      })\n    }));\n  }, [stocks]);\n  const handleStockSelect = stockName => {\n    setSelectedStock(stockName);\n  };\n  const selectedDataset = chartData.datasets.find(dataset => dataset.label === selectedStock);\n  const baselineDataset = {\n    label: 'Base Line',\n    data: selectedDataset ? Array(selectedDataset.data.length).fill(baselines[selectedStock]) : [],\n    borderColor: 'rgba(0, 0, 0, 0.4)',\n    borderWidth: 2,\n    borderDash: [5, 5],\n    fill: false,\n    pointRadius: 0\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Trading Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stocks-list\",\n        children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stock-item ${stock.name === selectedStock ? 'selected' : ''}`,\n          onClick: () => handleStockSelect(stock.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: stock.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"price\",\n            children: stock.price.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, stock.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: selectedDataset && /*#__PURE__*/_jsxDEV(Line, {\n          data: {\n            labels: chartData.labels,\n            datasets: [selectedDataset, baselineDataset]\n          },\n          options: {\n            scales: {\n              x: {\n                type: 'linear',\n                position: 'bottom',\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 10\n                }\n              },\n              y: {\n                beginAtZero: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"L5hvogc5MTc8FJqiIaWY0u+2fIA=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","jsxDEV","_jsxDEV","initialStocks","name","price","Math","floor","random","strategies","AAPL","GOOGL","sin","Date","now","AMZN","MSFT","cos","TSLA","Stock","_s","stocks","setStocks","selectedStock","setSelectedStock","chartData","setChartData","labels","Array","from","length","_","i","datasets","map","stock","label","data","fill","borderColor","toString","pointRadius","baselines","setBaselines","reduce","acc","priceHistory","interval","setInterval","prevStocks","newPrice","clearInterval","updateBaselines","prevBaselines","history","current","avgPrice","sum","forEach","push","shift","prevData","dataset","index","find","handleStockSelect","stockName","selectedDataset","baselineDataset","borderWidth","borderDash","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toFixed","options","scales","x","type","position","ticks","autoSkip","maxTicksLimit","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Stock/Stock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport 'chart.js/auto'\r\nimport './Stock.css'\r\n\r\nconst initialStocks = [\r\n  { name: 'AAPL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'GOOGL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'AMZN', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'MSFT', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'TSLA', price: Math.floor(Math.random() * 1000) },\r\n]\r\n\r\nconst strategies = {\r\n  AAPL: (price) => price * (1 + (Math.random() * 0.02 - 0.01)),\r\n  GOOGL: (price) =>\r\n    price *\r\n    (1 + 0.01 * Math.sin(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\r\n  AMZN: (price) => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\r\n  MSFT: (price) =>\r\n    price *\r\n    (1 + 0.01 * Math.cos(Date.now() / 1000) * (Math.random() > 0.5 ? 1 : -1)),\r\n  TSLA: (price) => price * (1 + (Math.random() * 0.03 - 0.015)),\r\n}\r\n\r\nconst Stock = () => {\r\n  const [stocks, setStocks] = useState(initialStocks)\r\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name)\r\n  const [chartData, setChartData] = useState({\r\n    labels: Array.from({ length: 50 }, (_, i) => i),\r\n    datasets: initialStocks.map((stock) => ({\r\n      label: stock.name,\r\n      data: Array(50).fill(stock.price),\r\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n      fill: false,\r\n      pointRadius: 0,\r\n    })),\r\n  })\r\n  const [baselines, setBaselines] = useState(\r\n    initialStocks.reduce(\r\n      (acc, stock) => ({ ...acc, [stock.name]: stock.price }),\r\n      {}\r\n    )\r\n  )\r\n  const priceHistory = useRef(\r\n    initialStocks.reduce(\r\n      (acc, stock) => ({ ...acc, [stock.name]: [stock.price] }),\r\n      {}\r\n    )\r\n  )\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setStocks((prevStocks) =>\r\n        prevStocks.map((stock) => {\r\n          const newPrice = strategies[stock.name](stock.price)\r\n          return {\r\n            ...stock,\r\n            price: newPrice,\r\n          }\r\n        })\r\n      )\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const updateBaselines = () => {\r\n      setBaselines((prevBaselines) =>\r\n        stocks.reduce((acc, stock) => {\r\n          const history = priceHistory.current[stock.name]\r\n          const avgPrice =\r\n            history.reduce((sum, price) => sum + price, 0) / history.length\r\n          return { ...acc, [stock.name]: avgPrice }\r\n        }, {})\r\n      )\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      stocks.forEach((stock) => {\r\n        priceHistory.current[stock.name].push(stock.price)\r\n        if (priceHistory.current[stock.name].length > 50) {\r\n          priceHistory.current[stock.name].shift()\r\n        }\r\n      })\r\n      updateBaselines()\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [stocks])\r\n\r\n  useEffect(() => {\r\n    setChartData((prevData) => ({\r\n      ...prevData,\r\n      datasets: prevData.datasets.map((dataset, index) => {\r\n        const stock = stocks.find((stock) => stock.name === dataset.label)\r\n        dataset.data.push(stock.price)\r\n        if (dataset.data.length > 50) dataset.data.shift()\r\n        return dataset\r\n      }),\r\n    }))\r\n  }, [stocks])\r\n\r\n  const handleStockSelect = (stockName) => {\r\n    setSelectedStock(stockName)\r\n  }\r\n\r\n  const selectedDataset = chartData.datasets.find(\r\n    (dataset) => dataset.label === selectedStock\r\n  )\r\n  const baselineDataset = {\r\n    label: 'Base Line',\r\n    data: selectedDataset\r\n      ? Array(selectedDataset.data.length).fill(baselines[selectedStock])\r\n      : [],\r\n    borderColor: 'rgba(0, 0, 0, 0.4)',\r\n    borderWidth: 2,\r\n    borderDash: [5, 5],\r\n    fill: false,\r\n    pointRadius: 0,\r\n  }\r\n\r\n  return (\r\n    <div className=\"stock-container\">\r\n      <h1>Stock Trading Platform</h1>\r\n      <div className=\"main-content\">\r\n        <div className=\"stocks-list\">\r\n          {stocks.map((stock, index) => (\r\n            <div\r\n              key={stock.name}\r\n              className={`stock-item ${\r\n                stock.name === selectedStock ? 'selected' : ''\r\n              }`}\r\n              onClick={() => handleStockSelect(stock.name)}\r\n            >\r\n              <span>{stock.name}</span>\r\n              <span className=\"price\">{stock.price.toFixed(2)}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          {selectedDataset && (\r\n            <Line\r\n              data={{\r\n                labels: chartData.labels,\r\n                datasets: [selectedDataset, baselineDataset],\r\n              }}\r\n              options={{\r\n                scales: {\r\n                  x: {\r\n                    type: 'linear',\r\n                    position: 'bottom',\r\n                    ticks: {\r\n                      autoSkip: true,\r\n                      maxTicksLimit: 10,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    beginAtZero: false,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stock\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}