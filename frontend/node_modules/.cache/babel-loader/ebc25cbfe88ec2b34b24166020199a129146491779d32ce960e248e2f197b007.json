{"ast":null,"code":"var _jsxFileName = \"C:\\\\Persist_Task\\\\Tmate\\\\frontend\\\\src\\\\PersistComponent\\\\Stock\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Stock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialStocks = [{\n  name: 'AAPL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'GOOGL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'AMZN',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'MSFT',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'TSLA',\n  price: Math.floor(Math.random() * 1000)\n}];\nconst Stock = () => {\n  _s();\n  const [stocks, setStocks] = useState(initialStocks);\n  const chartDataRef = useRef({\n    labels: Array.from({\n      length: 50\n    }, (_, i) => i),\n    datasets: initialStocks.map(stock => ({\n      label: stock.name,\n      data: Array(50).fill(stock.price),\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n      fill: false\n    }))\n  });\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => ({\n        ...stock,\n        price: stock.price + (Math.random() > 0.5 ? 10 : -10)\n      })));\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    chartDataRef.current.datasets.forEach((dataset, index) => {\n      dataset.data.push(stocks[index].price);\n      if (dataset.data.length > 50) {\n        dataset.data.shift();\n      }\n    });\n    // Trigger a state change to re-render the component\n    setStocks([...stocks]);\n  }, [stocks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Trading Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stocks-list\",\n      children: stocks.map(stock => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: stock.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: stock.price\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, stock.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartDataRef.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"eFxq8svZq3X83vfue63SA6j4+0o=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","jsxDEV","_jsxDEV","initialStocks","name","price","Math","floor","random","Stock","_s","stocks","setStocks","chartDataRef","labels","Array","from","length","_","i","datasets","map","stock","label","data","fill","borderColor","toString","interval","setInterval","prevStocks","clearInterval","current","forEach","dataset","index","push","shift","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Stock/Stock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport 'chart.js/auto'\r\nimport './Stock.css'\r\n\r\nconst initialStocks = [\r\n  { name: 'AAPL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'GOOGL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'AMZN', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'MSFT', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'TSLA', price: Math.floor(Math.random() * 1000) },\r\n]\r\n\r\nconst Stock = () => {\r\n  const [stocks, setStocks] = useState(initialStocks)\r\n  const chartDataRef = useRef({\r\n    labels: Array.from({ length: 50 }, (_, i) => i),\r\n    datasets: initialStocks.map((stock) => ({\r\n      label: stock.name,\r\n      data: Array(50).fill(stock.price),\r\n      borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n      fill: false,\r\n    })),\r\n  })\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setStocks((prevStocks) =>\r\n        prevStocks.map((stock) => ({\r\n          ...stock,\r\n          price: stock.price + (Math.random() > 0.5 ? 10 : -10),\r\n        }))\r\n      )\r\n    }, 2000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    chartDataRef.current.datasets.forEach((dataset, index) => {\r\n      dataset.data.push(stocks[index].price)\r\n      if (dataset.data.length > 50) {\r\n        dataset.data.shift()\r\n      }\r\n    })\r\n    // Trigger a state change to re-render the component\r\n    setStocks([...stocks])\r\n  }, [stocks])\r\n\r\n  return (\r\n    <div className=\"stock-container\">\r\n      <h1>Stock Trading Platform</h1>\r\n      <div className=\"stocks-list\">\r\n        {stocks.map((stock) => (\r\n          <div key={stock.name} className=\"stock-item\">\r\n            <span>{stock.name}</span>\r\n            <span>{stock.price}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chart-container\">\r\n        <Line data={chartDataRef.current} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stock\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}