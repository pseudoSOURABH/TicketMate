{"ast":null,"code":"var _jsxFileName = \"C:\\\\Persist_Task\\\\Tmate\\\\frontend\\\\src\\\\PersistComponent\\\\Stock\\\\Stock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './Stock.css';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(Chart.scaleService.getScaleAdapter());\nconst initialStocks = [{\n  name: 'AAPL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'GOOGL',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'AMZN',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'MSFT',\n  price: Math.floor(Math.random() * 1000)\n}, {\n  name: 'TSLA',\n  price: Math.floor(Math.random() * 1000)\n}];\nconst strategies = {\n  AAPL: price => price * (1 + Math.random() * 0.02 - 0.01),\n  GOOGL: price => price * (1 + 0.005 * Math.sin(Date.now() / 1000)),\n  AMZN: price => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\n  MSFT: price => price * (1 + 0.01 * Math.cos(Date.now() / 1000)),\n  TSLA: price => price * (1 + (Math.random() * 0.03 - 0.015))\n};\nChartJS.register(ChartJS.scaleService.getScaleAdapter());\nconst Stock = () => {\n  _s();\n  const [stocks, setStocks] = useState(initialStocks);\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: initialStocks[0].name,\n      data: [],\n      borderColor: 'green',\n      fill: false\n    }]\n  });\n  const prevPrices = useRef(initialStocks.map(stock => stock.price));\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStocks(prevStocks => prevStocks.map(stock => {\n        const newPrice = strategies[stock.name](stock.price);\n        return {\n          ...stock,\n          price: newPrice\n        };\n      }));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const selectedStockData = chartData.datasets[0];\n    const stockIndex = stocks.findIndex(stock => stock.name === selectedStock);\n    if (stockIndex !== -1) {\n      const newPrice = stocks[stockIndex].price;\n      const newDataPoint = {\n        x: Date.now(),\n        y: newPrice\n      };\n      selectedStockData.data.push(newDataPoint);\n      if (selectedStockData.data.length > 50) selectedStockData.data.shift();\n      setChartData({\n        ...chartData\n      });\n    }\n  }, [stocks, selectedStock]);\n  const handleStockSelect = stockName => {\n    setSelectedStock(stockName);\n    setChartData({\n      labels: [],\n      datasets: [{\n        label: stockName,\n        data: [],\n        borderColor: 'green',\n        fill: false\n      }]\n    });\n  };\n  const chartOptions = {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'second',\n          displayFormats: {\n            second: 'HH:mm:ss'\n          }\n        },\n        ticks: {\n          maxRotation: 0,\n          minRotation: 0\n        }\n      },\n      y: {\n        beginAtZero: false\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stock-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Trading Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stocks-list\",\n        children: stocks.map((stock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `stock-item ${stock.name === selectedStock ? 'selected' : ''}`,\n          onClick: () => handleStockSelect(stock.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: stock.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `price ${stock.price >= prevPrices.current[index] ? 'price-up' : 'price-down'}`,\n            children: stock.price.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), prevPrices.current[index] = stock.price]\n        }, stock.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Stock, \"3Fq5VrcUp6y28ptm+WTa7dXk5BM=\");\n_c = Stock;\nexport default Stock;\nvar _c;\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Line","Chart","jsxDEV","_jsxDEV","register","scaleService","getScaleAdapter","initialStocks","name","price","Math","floor","random","strategies","AAPL","GOOGL","sin","Date","now","AMZN","MSFT","cos","TSLA","ChartJS","Stock","_s","stocks","setStocks","selectedStock","setSelectedStock","chartData","setChartData","labels","datasets","label","data","borderColor","fill","prevPrices","map","stock","interval","setInterval","prevStocks","newPrice","clearInterval","selectedStockData","stockIndex","findIndex","newDataPoint","x","y","push","length","shift","handleStockSelect","stockName","chartOptions","scales","type","time","unit","displayFormats","second","ticks","maxRotation","minRotation","beginAtZero","plugins","legend","display","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","current","toFixed","options","_c","$RefreshReg$"],"sources":["C:/Persist_Task/Tmate/frontend/src/PersistComponent/Stock/Stock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport 'chart.js/auto'\r\nimport './Stock.css'\r\nimport { Chart } from 'chart.js/auto'\r\n\r\nChart.register(Chart.scaleService.getScaleAdapter())\r\nconst initialStocks = [\r\n  { name: 'AAPL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'GOOGL', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'AMZN', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'MSFT', price: Math.floor(Math.random() * 1000) },\r\n  { name: 'TSLA', price: Math.floor(Math.random() * 1000) },\r\n]\r\n\r\nconst strategies = {\r\n  AAPL: (price) => price * (1 + Math.random() * 0.02 - 0.01),\r\n  GOOGL: (price) => price * (1 + 0.005 * Math.sin(Date.now() / 1000)),\r\n  AMZN: (price) => price * (1 + (Math.random() > 0.5 ? 0.015 : -0.015)),\r\n  MSFT: (price) => price * (1 + 0.01 * Math.cos(Date.now() / 1000)),\r\n  TSLA: (price) => price * (1 + (Math.random() * 0.03 - 0.015)),\r\n}\r\nChartJS.register(ChartJS.scaleService.getScaleAdapter())\r\nconst Stock = () => {\r\n  const [stocks, setStocks] = useState(initialStocks)\r\n  const [selectedStock, setSelectedStock] = useState(initialStocks[0].name)\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: initialStocks[0].name,\r\n        data: [],\r\n        borderColor: 'green',\r\n        fill: false,\r\n      },\r\n    ],\r\n  })\r\n  const prevPrices = useRef(initialStocks.map((stock) => stock.price))\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setStocks((prevStocks) =>\r\n        prevStocks.map((stock) => {\r\n          const newPrice = strategies[stock.name](stock.price)\r\n          return {\r\n            ...stock,\r\n            price: newPrice,\r\n          }\r\n        })\r\n      )\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const selectedStockData = chartData.datasets[0]\r\n    const stockIndex = stocks.findIndex((stock) => stock.name === selectedStock)\r\n    if (stockIndex !== -1) {\r\n      const newPrice = stocks[stockIndex].price\r\n      const newDataPoint = {\r\n        x: Date.now(),\r\n        y: newPrice,\r\n      }\r\n      selectedStockData.data.push(newDataPoint)\r\n      if (selectedStockData.data.length > 50) selectedStockData.data.shift()\r\n      setChartData({ ...chartData })\r\n    }\r\n  }, [stocks, selectedStock])\r\n\r\n  const handleStockSelect = (stockName) => {\r\n    setSelectedStock(stockName)\r\n    setChartData({\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: stockName,\r\n          data: [],\r\n          borderColor: 'green',\r\n          fill: false,\r\n        },\r\n      ],\r\n    })\r\n  }\r\n\r\n  const chartOptions = {\r\n    scales: {\r\n      x: {\r\n        type: 'time',\r\n        time: {\r\n          unit: 'second',\r\n          displayFormats: {\r\n            second: 'HH:mm:ss',\r\n          },\r\n        },\r\n        ticks: {\r\n          maxRotation: 0,\r\n          minRotation: 0,\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: false,\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n  }\r\n\r\n  return (\r\n    <div className=\"stock-container\">\r\n      <h1>Stock Trading Platform</h1>\r\n      <div className=\"main-content\">\r\n        <div className=\"stocks-list\">\r\n          {stocks.map((stock, index) => (\r\n            <div\r\n              key={stock.name}\r\n              className={`stock-item ${\r\n                stock.name === selectedStock ? 'selected' : ''\r\n              }`}\r\n              onClick={() => handleStockSelect(stock.name)}\r\n            >\r\n              <span>{stock.name}</span>\r\n              <span\r\n                className={`price ${\r\n                  stock.price >= prevPrices.current[index]\r\n                    ? 'price-up'\r\n                    : 'price-down'\r\n                }`}\r\n              >\r\n                {stock.price.toFixed(2)}\r\n              </span>\r\n              {(prevPrices.current[index] = stock.price)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <Line data={chartData} options={chartOptions} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stock\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}